/**
 ** Copyright 2019 General Electric Company
 **
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
 ** You may obtain a copy of the License at
 ** 
 **     http://www.apache.org/licenses/LICENSE-2.0
 ** 
 ** Unless required by applicable law or agreed to in writing, software
 ** distributed under the License is distributed on an "AS IS" BASIS,
 ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ** See the License for the specific language governing permissions and
 ** limitations under the License.
 */

package com.ge.research.semtk.load.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.apache.commons.io.FileUtils;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Hashtable;

import com.ge.research.semtk.belmont.AutoGeneratedQueryTypes;
import com.ge.research.semtk.belmont.Node;
import com.ge.research.semtk.belmont.NodeGroup;
import com.ge.research.semtk.belmont.PropertyItem;
import com.ge.research.semtk.belmont.ValueConstraint;
import com.ge.research.semtk.edc.client.ResultsClient;
import com.ge.research.semtk.edc.client.StatusClient;
import com.ge.research.semtk.load.DataLoader;
import com.ge.research.semtk.load.dataset.CSVDataset;
import com.ge.research.semtk.load.dataset.Dataset;
import com.ge.research.semtk.load.utility.ImportSpecHandler;
import com.ge.research.semtk.load.utility.SparqlGraphJson;
import com.ge.research.semtk.ontologyTools.OntologyInfo;
import com.ge.research.semtk.resultSet.SimpleResultSet;
import com.ge.research.semtk.resultSet.Table;
import com.ge.research.semtk.resultSet.TableResultSet;
import com.ge.research.semtk.sparqlX.InMemoryInterface;
import com.ge.research.semtk.sparqlX.SparqlConnection;
import com.ge.research.semtk.sparqlX.SparqlEndpointInterface;
import com.ge.research.semtk.sparqlX.SparqlResultTypes;
import com.ge.research.semtk.test.IntegrationTestUtility;
import com.ge.research.semtk.test.TestGraph;
import com.ge.research.semtk.utility.LocalLogger;
import com.ge.research.semtk.utility.Utility;

/**
 * Testing data loading WITHOUT SERVICE LAYER.
 * This is only "_IT" integration test because of the triple-store
 * @author 200001934
 *
 */
public class DataLoaderTest_InMemory_IT {

	private static final int DEFAULT_BATCH_SIZE = 32;
	
	@BeforeClass
	public static void setup() throws Exception {
		IntegrationTestUtility.authenticateJunit();
	}
	
	
	
	@Test
	public void testLoadData() throws Exception {
		
		InMemoryInterface sei = new InMemoryInterface("http://name");
		
		// get the load sgjson
		SparqlGraphJson sgJson = new SparqlGraphJson(Utility.getResourceAsJson(this, "/loadTest.json"));
		sgJson.setSparqlConn(new SparqlConnection("anon", sei));
		

		// load owl
		Path path = Paths.get("src/test/resources/loadTest.owl");
		byte[] owl = Files.readAllBytes(path);
		SimpleResultSet resultSet = SimpleResultSet.fromJson(sei.executeAuthUploadOwl(owl));
		resultSet.throwExceptionIfUnsuccessful();

		// Pre changes:   19.5s 18.5s  18.64s  17.514
		// During changes:  
		// Bigger-ish test of many import spec features and timing
		Dataset ds = new CSVDataset("src/test/resources/loadTestData.csv", false);
				
		TestGraph.clearGraph();
		
		// import
		DataLoader dl = new DataLoader(sgJson, ds, TestGraph.getUsername(), TestGraph.getPassword());
		
		long start = IntegrationTestUtility.getStartTime();
		dl.importData(true);
		IntegrationTestUtility.logDuration(start, "done with import");
		String resOwl = sei.dumpToOwl();
		TestGraph.uploadOwlString(resOwl);
		
		/** try this next but can't get the compile to work
		String resOwl = sei.dumpToTurtle();
		TestGraph.uploadTurtleString(resOwl);
		**/
		
		IntegrationTestUtility.logDuration(start, "testLoadData done upload owl");
		
		Table err = dl.getLoadingErrorReport();
		if (err.getNumRows() > 0) {
			LocalLogger.logToStdErr(err.toCSVString());
			fail();
		}

		assertEquals(dl.getTotalRecordsProcessed(), 1998);
		
		IntegrationTestUtility.querySeiAndCheckResults(sgJson.getNodeGroup(), sei, this, "/loadTestResults.csv");
		
		TestGraph.queryAndCheckResults(sgJson.getNodeGroup(), this, "/loadTestResults.csv");
		
	}
	
}
