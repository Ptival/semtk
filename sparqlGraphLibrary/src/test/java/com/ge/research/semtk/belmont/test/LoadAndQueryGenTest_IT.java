/**
 ** Copyright 2016-2019 General Electric Company
 **
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
 ** You may obtain a copy of the License at
 ** 
 **     http://www.apache.org/licenses/LICENSE-2.0
 ** 
 ** Unless required by applicable law or agreed to in writing, software
 ** distributed under the License is distributed on an "AS IS" BASIS,
 ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ** See the License for the specific language governing permissions and
 ** limitations under the License.
 */

package com.ge.research.semtk.belmont.test;

import static org.junit.Assert.*;

import org.junit.BeforeClass;
import org.junit.Test;

import com.ge.research.semtk.test.IntegrationTestUtility;
import com.ge.research.semtk.test.TestGraph;
import com.ge.research.semtk.belmont.AutoGeneratedQueryTypes;
import com.ge.research.semtk.belmont.NodeGroup;
import com.ge.research.semtk.load.utility.SparqlGraphJson;
import com.ge.research.semtk.resultSet.Table;
import com.ge.research.semtk.resultSet.TableResultSet;
import com.ge.research.semtk.sparqlX.SparqlEndpointInterface;
import com.ge.research.semtk.sparqlX.SparqlResultTypes;

/**
 * As of Dec 2018, most advanced integration testing of ingestion and querying features.
 * 
 * Ingestion and queries are performed without REST calls (DataLoader and SparqlEndpointInterface).
 * "Integration" is the triplestore.
 * 
 * Test query functions by running them and checking the number of returns.  NOT by inspecting SPARQL.
 * 
 * @author 200001934
 *
 */
public class LoadAndQueryGenTest_IT {
		
	private static SparqlGraphJson sgJson = null;
	
	@BeforeClass
	public static void setup() throws Exception {
		IntegrationTestUtility.authenticateJunit();
		
		// This nodegroup includes multiple nodes with the same type
		// and URI lookup where different nodes with the same type
		// can represent the same URI on different lines of input.
		
		sgJson = TestGraph.initGraphWithData("chain");
	}
	
	
	/**
	 * Basic query of tricky load
	 * @throws Exception
	 */
	
	@Test
	public void basicSelectQuery() throws Exception {
		
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(2, tab.getNumRows());
		assertEquals(4, tab.getNumColumns());
	}
	
	@Test
	public void optionalNode() throws Exception {
		
		// get every link regardless of whether it has a nextLink
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain_optional.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(9, tab.getNumRows());
		assertEquals(2, tab.getNumColumns());
	}
	
	@Test
	public void optionalProp() throws Exception {
		
		// get every chain regardless of whether it has a description
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain_optional_prop.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(2, tab.getNumRows());
		assertEquals(2, tab.getNumColumns());
	}
	
	@Test
	public void reverseOptionalNode() throws Exception {
		
		// get every pair of links regardless of whether they are directly attached to chain
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain_rev_optional.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(6, tab.getNumRows());
		assertEquals(3, tab.getNumColumns());
	}
	
	@Test
	public void minusNode() throws Exception {
		
		// get every link regardless of whether it has a nextLink
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain_minus.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(3, tab.getNumRows());
		assertEquals(2, tab.getNumColumns());
	}
	
	@Test
	public void reverseMinusNode() throws Exception {
		
		// get every pair of links that is NOT attached to a chain
		NodeGroup ng = TestGraph.getNodeGroup("src/test/resources/chain_rev_minus.json");
		
		String select = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, null, 10, null);
		SparqlEndpointInterface sei =  sgJson.getSparqlConn().getDefaultQueryInterface();
		TableResultSet tRes = (TableResultSet) sei.executeQueryAndBuildResultSet(select, SparqlResultTypes.TABLE);
		
		Table tab = tRes.getTable();
		assertEquals(4, tab.getNumRows());
		assertEquals(3, tab.getNumColumns());
	}
	
}
