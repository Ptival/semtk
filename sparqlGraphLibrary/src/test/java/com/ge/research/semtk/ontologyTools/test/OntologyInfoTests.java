package com.ge.research.semtk.ontologyTools.test;

import static org.junit.Assert.*;

import org.json.simple.JSONObject;
import org.junit.Test;

import com.ge.research.semtk.load.utility.SparqlGraphJson;
import com.ge.research.semtk.ontologyTools.OntologyClass;
import com.ge.research.semtk.ontologyTools.OntologyInfo;
import com.ge.research.semtk.ontologyTools.OntologyProperty;
import com.ge.research.semtk.utility.Utility;

public class OntologyInfoTests {

	@Test
	public void jsonFile() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/sampleBatteryOInfo.json"));
        
        // use json functions to copy oInfo into oInfo2
        JSONObject json = oInfo.toJson();
        System.out.println(json.toJSONString());
        OntologyInfo oInfo2 = new OntologyInfo(json);
        
        // do some simple tests
        assertEquals(oInfo.getPropertyNames().size(), 9);
        assertEquals(oInfo2.getPropertyNames().size(), 9);
        assertEquals(oInfo.getClassNames().size(), 4);
        assertEquals(oInfo2.getClassNames().size(), 4);
        
        assertTrue(oInfo2.getClass("http://kdl.ge.com/durabattery#Battery") != null);

	}
	
	@Test
	public void jsonFileWithAnnotations() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        // use json functions to copy oInfo into oInfo2
        JSONObject json = oInfo.toJson();
        System.out.println(json.toJSONString());
        OntologyInfo oInfo2 = new OntologyInfo(json);
        
        // do some simple tests
        assertEquals(oInfo.getPropertyNames().size(), oInfo2.getPropertyNames().size());
        assertEquals(oInfo.getClassNames().size(), oInfo2.getClassNames().size());
        
        OntologyClass battery = oInfo2.getClass("http://kdl.ge.com/batterydemo#Battery");
        assertTrue(battery.getAnnotationLabels().get(0).equals("duracell"));
        assertTrue(battery.getAnnotationComments().size() == 0);
        
        // test the tricky id property that has complex Domain, (Battery and Cell) but consistent Range
        OntologyProperty id = battery.getProperty("http://kdl.ge.com/batterydemo#id");
        System.out.println(id.getAnnotationLabelsString());
        assertTrue(id.getAnnotationLabels().size() == 2);
        assertTrue(id.getAnnotationComments().size() == 0);
        
	}
	
	@Test
	public void rdfOWL() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        System.out.println(oInfo.generateRdfOWL("http://kdl.ge.com/durabattery"));

	}
	
	@Test
	public void sadl() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        System.out.println(oInfo.generateSADL("http://kdl.ge.com/durabattery"));

	}

}
