package com.ge.research.semtk.ontologyTools.test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.json.simple.JSONObject;
import org.junit.Test;

import com.ge.research.semtk.load.utility.SparqlGraphJson;
import com.ge.research.semtk.ontologyTools.OntologyClass;
import com.ge.research.semtk.ontologyTools.OntologyInfo;
import com.ge.research.semtk.ontologyTools.OntologyProperty;
import com.ge.research.semtk.utility.Utility;

public class OntologyInfoTests {

	@Test
	public void jsonFile() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/sampleBatteryOInfo.json"));
        
        // use json functions to copy oInfo into oInfo2
        JSONObject json = oInfo.toJson();
        System.out.println(json.toJSONString());
        OntologyInfo oInfo2 = new OntologyInfo(json);
        
        // do some simple tests
        assertEquals(oInfo.getPropertyNames().size(), 9);
        assertEquals(oInfo2.getPropertyNames().size(), 9);
        assertEquals(oInfo.getClassNames().size(), 4);
        assertEquals(oInfo2.getClassNames().size(), 4);
        
        assertTrue(oInfo2.getClass("http://kdl.ge.com/durabattery#Battery") != null);

	}
	
	@Test
	public void jsonFileTemp() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/sampleBatteryOInfo.json"));
        
        // use json functions to copy oInfo into oInfo2
        JSONObject json = oInfo.toJson();
        System.out.println(json.toJSONString());
        System.out.println(json.toJSONString().length());

        OntologyInfo oInfo2 = new OntologyInfo(json);
        
        // do some simple tests
        assertEquals(oInfo.getPropertyNames().size(), 9);
        assertEquals(oInfo2.getPropertyNames().size(), 9);
        assertEquals(oInfo.getClassNames().size(), 4);
        assertEquals(oInfo2.getClassNames().size(), 4);
        
        assertTrue(oInfo2.getClass("http://kdl.ge.com/durabattery#Battery") != null);

	}
	
	@Test
	public void jsonFileWithAnnotations() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        // use json functions to copy oInfo into oInfo2
        JSONObject json = oInfo.toJson();
        System.out.println(json.toJSONString());
        OntologyInfo oInfo2 = new OntologyInfo(json);
        
        // do some simple tests
        assertEquals(oInfo.getPropertyNames().size(), oInfo2.getPropertyNames().size());
        assertEquals(oInfo.getClassNames().size(), oInfo2.getClassNames().size());
        
        // test simple: battery has a label and no comments
        OntologyClass battery = oInfo2.getClass("http://kdl.ge.com/batterydemo#Battery");
        assertTrue(battery.getAnnotationLabels().get(0).equals("duracell"));
        assertTrue(battery.getAnnotationComments().size() == 0);
        
        // test the tricky id property that has complex Domain, (Battery and Cell) but consistent Range
        OntologyProperty id = battery.getProperty("http://kdl.ge.com/batterydemo#id");
        System.out.println(id.getAnnotationLabelsString());
        assertTrue(id.getAnnotationLabels().size() == 2);
        assertTrue(id.getAnnotationComments().size() == 0);
        
        // test "cell" has no annotations
        OntologyClass cell = oInfo2.getClass("http://kdl.ge.com/batterydemo#Cell");
        assertTrue(cell.getAnnotationLabels().size() == 0);
        assertTrue(cell.getAnnotationComments().size() == 0);
        
        // test "cell"->"color" annotations
        OntologyProperty color = cell.getProperty("http://kdl.ge.com/batterydemo#color");
        assertTrue(color.getAnnotationLabels().size() == 0);
        assertTrue(color.getAnnotationComments().get(0).equals("you know,like red"));
        
	}
	
	@Test
	public void getPropertyDomainTest() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        OntologyClass classCell = oInfo.getClass("http://kdl.ge.com/batterydemo#Cell");
        OntologyProperty propId = classCell.getProperty("http://kdl.ge.com/batterydemo#id");
        
        // test that "id" is in the domain of two classes
        ArrayList<OntologyClass> domain = oInfo.getPropertyDomain(propId);
        assertTrue(domain.size() == 2);
        
        // classes in the domain are Battery and Cell (in either order)
        ArrayList<String> domainStrings = new ArrayList<String>();
        domainStrings.add(domain.get(0).getNameString(true));
        domainStrings.add(domain.get(1).getNameString(true));
        assertTrue(domainStrings.contains("Battery"));
        assertTrue(domainStrings.contains("Cell"));
       
	}
	
	@Test
	public void rdfOWL() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        System.out.println(oInfo.generateRdfOWL("http://kdl.ge.com/durabattery"));

	}
	
	@Test
	public void sadl() throws Exception {
		// load oInfo from file generated by javascript
        OntologyInfo oInfo = new OntologyInfo(Utility.getJSONObjectFromFilePath("src/test/resources/annotationBatteryOInfo.json"));
        
        System.out.println(oInfo.generateSADL("http://kdl.ge.com/durabattery"));

	}

}
