#!/bin/bash

#
#

# For compatibility with docker compose,
# this file needs to be sourced from the folder containing it
if [ ! -f ".env" ]; then
	echo ".env needs to be in the current working folder of the process that sourced it"
	exit 1
fi

# Helper functions
. ./.fun

os
hostip

# Don't source this file twice.
if [ ! -z ${SOURCED_OSS_ENV+x} ]; then
	return
fi
export SOURCED_OSS_ENV=true

# Proxy settings [optional] - set if your network requires a proxy to connect to the Internet
export httpProxyHost=
export httpProxyPort=80
if [ -z "${httpProxyHost}" ]; then
	export http_proxy=""
else
	export http_proxy=http://${httpProxyHost}:${httpProxyPort}
fi
export httpsProxyHost=$httpProxyHost
export httpsProxyPort=$httpProxyPort
export https_proxy=$http_proxy
export no_proxy=${HOST_IP},localhost
export nonProxyHosts="${HOST_IP}|localhost"

# Docker build settings
## REGISTRY [optional] - specify to override the default registry, include "/" at the end.
export REGISTRY=

## VERSION: [optional] - Version tag for this Docker image. Example: v20180302
export VERSION=CURRENT-SNAPSHOT
export TAG=$(if [ -z "${VERSION}" ]; then echo ""; else echo ":${VERSION}"; fi)

# Docker container runtime settings
## COMPOSE_PROJECT_NAME [optional] - prefix for container names in composition
export COMPOSE_PROJECT_NAME=host

## Volume map [optional] - Mapping of external to internal paths including the -v switch. Example $(pwd):/wd
export VOL_MAP="-v $(pwd):/wd -v $(pwd)/../../.m2:/root/.m2"

## RUN_OPTS [optional] - additional options to specify with the run comman. Example -e POSTGRES_DB=dbname
export RUN_OPTS="-e http_proxy=$http_proxy -e https_proxy=$https_proxy -e no_proxy=$no_proxy -e httpProxyHost=$httpProxyHost -e httpProxyPort=$httpProxyPort -e httpsProxyHost=$httpsProxyHost -e httpsProxyPort=$httpsProxyPort -e nonProxyHosts=$nonProxyHosts"

## MVN_IMAGE - specify the name of the Docker image to use for building the source code
export MVN_IMAGE=maven:3.5.3-jdk-8
## COMPOSE_IMAGE - specify the name of the Docker image to use when running docker-compose
export COMPOSE_IMAGE=docker/compose:1.19.0


## JVM_OPTIONS [optional] values specified here will be passed to java processes
export JVM_OPTIONS="-Xmx20G -Xincgc"
export JVM_OPTIONS_LARGE_MEMORY="-Xmx50G -Xincgc"

## ports
export PORT_SPARQLDB=2420
export PORT_SPARQLGRAPH_WEB=8860
export PORT_SPARQL_QUERY_SERVICE=12050
export PORT_SPARQLGRAPH_STATUS_SERVICE=12051
export PORT_SPARQLGRAPH_RESULTS_SERVICE=12052
export PORT_DISPATCH_SERVICE=12053
export PORT_HIVE_SERVICE=12055
export PORT_NODEGROUPSTORE_SERVICE=12056
export PORT_ONTOLOGYINFO_SERVICE=12057
export PORT_NODEGROUPEXECUTION_SERVICE=12058
export PORT_NODEGROUP_SERVICE=12059
#export PORT_UTILITY_SERVICE=12060	# placeholder
export PORT_INGESTION_SERVICE=12091

## dataset for jobs and EDC services
export SERVICES_DATASET_SERVER_URL=http://${HOST_IP}:${PORT_SPARQLDB}
export SERVICES_DATASET_ENDPOINT_TYPE=virtuoso
export SERVICES_DATASET_DOMAIN=http://
export SERVICES_DATASET=http://research.ge.com/semtk/services

## sparqldb service
export DATA_SPARQLDB=$(pwd)/sparqlDB/virtuoso
export PWD_SPARQLDB=dba

## sparql query service
export SPARQLQUERY_SERVICE_HOST=${HOST_IP}
export SPARQLQUERY_SERVICE_PROTOCOL=http
export SPARQLQUERY_SERVICE_ENDPOINT=/sparqlQueryService/query
export SPARQLQUERY_SERVICE_ENDPOINT_AUTH=/sparqlQueryService/queryAuth
# TODO credentials should be made specific to dataset server url
export SPARQLQUERY_SERVICE_USER=dba
export SPARQLQUERY_SERVICE_PWD=dba

## status service
export STATUS_SERVICE_HOST=${HOST_IP}
export STATUS_SERVICE_PROTOCOL=http
export statusJobMaxWaitMsec=300000
export statusLoggingEnabled=NO
export statusApplicationLogName=StatusService

## results service
export RESULTS_SERVICE_HOST=${HOST_IP}
export RESULTS_SERVICE_PROTOCOL=http
export RESULTS_SERVICE_MULTIPART_MAXFILESIZE=1000Mb
export RESULTS_SERVICE_MULTIPART_MAXREQUESTSIZE=1000Mb
export resultsCleanUpThreadsEnabled=YES
export resultsCleanUpThreadsFrequency=480
export resultsLoggingEnabled=YES
export resultsApplicationLogName=ResultsService
export resultsBaseURL=http://${RESULTS_SERVICE_HOST}:${PORT_SPARQLGRAPH_RESULTS_SERVICE}
export resultsServiceURL=http://${RESULTS_SERVICE_HOST}:${PORT_SPARQLGRAPH_RESULTS_SERVICE}/results
export resultsFileLocation=/tmp/DISPATCH_RESULTS
export resultsSampleLines=100

## dispatch service
export DISPATCH_SERVICE_HOST=${HOST_IP}
export DISPATCH_SERVICE_PROTOCOL=http
export LOCATION_ADDITIONAL_DISPATCHER_JARS=""
export DISPATCHER_CLASS_NAME=com.ge.research.semtk.sparqlX.asynchronousQuery.AsynchronousNodeGroupDispatcher

## hive service
export HIVE_SERVICE_HOST=${HOST_IP}
export HIVE_SERVICE_PROTOCOL=http
export hiveUsername=hive
export hivePassword=password

## nodegroup store service
export NODEGROUPSTORE_SERVICE_HOST=${HOST_IP}
export NODEGROUPSTORE_SERVICE_PROTOCOL=http
export NODEGROUPSTORE_SERVICE_MULTIPART_MAXFILESIZE=1000Mb
export storeSparqlServerDataDataset=http://research.ge.com/knowledge/prefab/data
export storeSparqlServerModelDataset=http://research.ge.com/knowledge/prefab/model
export storeSparqlServerDomain=http://

## ontology info service
export ONTOLOGYINFO_SERVICE_HOST=${HOST_IP}
export ONTOLOGYINFO_SERVICE_PROTOCOL=http
export oinfoLoggingEnabled=NO
export oinfoApplicationLogName=OntologyInfoService

## nodegroup execution service
export NODEGROUPEXECUTION_SERVICE_HOST=${HOST_IP}
export NODEGROUPEXECUTION_SERVICE_PROTOCOL=http

## nodegroup service
export NODEGROUP_SERVICE_HOST=${HOST_IP}
export NODEGROUP_SERVICE_PROTOCOL=http
export NODEGROUP_SERVICE_MULTIPART_MAXFILESIZE=1000Mb

## ingestion service
export INGESTION_SERVICE_HOST=${HOST_IP}
export INGESTION_SERVICE_PROTOCOL=http
export INGESTION_SERVICE_MULTIPART_MAXFILESIZE=1000Mb
export ingestionBatchSize=16
export ingestionLoggingEnabled=NO
export ingestionApplicationName=IngestionService

## logging service
export LOGGING_SERVICE_HOST=${HOST_IP}
export LOGGING_SERVICE_PROTOCOL=http
export LOGGING_SERVICE_PORT=12092
export LOGGING_SERVICE_ENDPOINT=/Logging/usageLog

## semtk-sparqlgraph-web
export INGEST_URL=http://${INGESTION_SERVICE_HOST}:${PORT_INGESTION_SERVICE}/ingestion/
export QUERY_URL=http://${SPARQLQUERY_SERVICE_HOST}:${PORT_SPARQL_QUERY_SERVICE}/sparqlQueryService/
export STATUS_URL=http://${STATUS_SERVICE_HOST}:${PORT_SPARQLGRAPH_STATUS_SERVICE}/status/
export RESULTS_URL=http://${RESULTS_SERVICE_HOST}:${PORT_SPARQLGRAPH_RESULTS_SERVICE}/results/
export DISPATCHER_URL=http://${DISPATCH_SERVICE_HOST}:${PORT_DISPATCH_SERVICE}/dispatcher/
export HIVE_URL=http://${HIVE_SERVICE_HOST}:${PORT_HIVE_SERVICE}/hiveService/
export NGSTORE_URL=http://${NODEGROUPSTORE_SERVICE_HOST}:${PORT_NODEGROUPSTORE_SERVICE}/nodeGroupStore/
export OINFO_URL=http://${ONTOLOGYINFO_SERVICE_HOST}:${PORT_ONTOLOGYINFO_SERVICE}/ontologyinfo/
export NGEXEC_URL=http://${NODEGROUPEXECUTION_SERVICE_HOST}:${PORT_NODEGROUPEXECUTION_SERVICE}/nodeGroupExecution/
export NG_URL=http://${NODEGROUP_SERVICE_HOST}:${PORT_NODEGROUP_SERVICE}/nodeGroup/
 
export SECURE_REST_CLIENTS=false

## repeats of the above, renamed for the Tomcat web html and js
# --------------- IMPORTANT ---------------
#           injected into javascript
export WEB_PROTOCOL=http
export WEB_INGESTION_HOST=${INGESTION_SERVICE_HOST}
export WEB_INGESTION_PORT=${PORT_INGESTION_SERVICE}
export WEB_SPARQL_QUERY_HOST=${SPARQLQUERY_SERVICE_HOST}
export WEB_SPARQL_QUERY_PORT=${PORT_SPARQL_QUERY_SERVICE}
export WEB_STATUS_HOST=${STATUS_SERVICE_HOST}
export WEB_STATUS_PORT=${PORT_SPARQLGRAPH_STATUS_SERVICE}
export WEB_RESULTS_HOST=${RESULTS_SERVICE_HOST}
export WEB_RESULTS_PORT=${PORT_SPARQLGRAPH_RESULTS_SERVICE}
export WEB_DISPATCH_HOST=${DISPATCH_SERVICE_HOST}
export WEB_DISPATCH_PORT=${PORT_DISPATCH_SERVICE}
export WEB_HIVE_HOST=${HIVE_SERVICE_HOST}
export WEB_HIVE_PORT=${PORT_HIVE_SERVICE}
export WEB_NODEGROUPSTORE_HOST=${NODEGROUPSTORE_SERVICE_HOST}
export WEB_NODEGROUPSTORE_PORT=${PORT_NODEGROUPSTORE_SERVICE}
export WEB_ONTOLOGYINFO_HOST=${ONTOLOGYINFO_SERVICE_HOST}
export WEB_ONTOLOGYINFO_PORT=${PORT_ONTOLOGYINFO_SERVICE}
export WEB_NODEGROUPEXECUTION_HOST=${NODEGROUPEXECUTION_SERVICE_HOST}
export WEB_NODEGROUPEXECUTION_PORT=${PORT_NODEGROUPEXECUTION_SERVICE}
export WEB_NODEGROUP_HOST=${NODEGROUP_SERVICE_HOST}
export WEB_NODEGROUP_PORT=${PORT_NODEGROUP_SERVICE}
# --------------- IMPORTANT ---------------


# apply any overrides to settings we just loaded
if [ -f DOT_SETTINGS ] && [ -f ENV_OVERRIDE ]; then
	echo Error: both the older DOT_SETTINGS and newer ENV_OVERRIDE are present.
	echo Remove one of them
	exit 1
elif [ -f DOT_SETTINGS ]; then
	echo Using deprecated DOT_SETTINGS.  Please rename to ENV_OVERRIDE.
	. ./DOT_SETTINGS
elif [ -f ENV_OVERRIDE ]; then
	. ./ENV_OVERRIDE
fi
